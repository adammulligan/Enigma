/**
 * 
 */
package com.adammulligan.uni;

import java.io.IOException;
import java.math.BigInteger;
import java.security.KeyException;
import java.util.Random;
import java.util.Scanner;

/**
 * An interactive console application that generates and stores a pair of RSA keys.
 * 
 * @author adammulligan
 *
 */
public class GenerateKeys {
	int length;
	String output_file;
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		System.out.println("Generating public/private RSA key pair.");
		
		Scanner kb = new Scanner(System.in);
		
		System.out.print("Key length (bits): ");
		int length = kb.nextInt();
		
		System.out.print("Output to [~/id_rsa]: ");
		String output_file = kb.next();
		
		if (output_file=="") { output_file = "~/id_rsa"; }
		
		GenerateKeys gk = new GenerateKeys(length, output_file);
		
		gk.generateKeys();
	}
	
	public GenerateKeys(int length,String output_file) {
		this.length      = length;
		this.output_file = output_file;
	}
	
	/**
	 * Tries to generate the key pair, and cleans up any files if one half of the pair fails to generate.
	 */
	private void generateKeys() {
		try {
			this.generatePrivateKey();
			this.generatePublicKey();
		} catch (KeyException ke) {
			// Remove keys, cleanup
		}
	}
	
	/**
	 * @throws KeyException
	 */
	private void generatePrivateKey() throws KeyException {
		// Generate!
		String key = null,file = null;
		this.writeFile(key,file);
	}
	
	/**
	 * @throws KeyException
	 */
	private void generatePublicKey() throws KeyException {
		String key = null,file = null;
		this.writeFile(key,file);
	}
	
	private void writeFile(String content, String filename) {
		
	}
	
	private int generatePrimes(int bits, int certainty) {
		BigInteger p,q;
		
		p = new BigInteger(bits,certainty,new Random());
		q = new BigInteger(bits,certainty,new Random());
		
		if (p == q) return this.generatePrimes(bits,certainty);
		else return new Array(p,q);
	}
}
